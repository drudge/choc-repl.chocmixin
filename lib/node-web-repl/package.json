{
  "name": "node-web-repl",
  "description": "Add a web-based read/eval/print/loop to your Node.js app (useful for debugging)",
  "version": "0.0.5",
  "keywords": [
    "repl",
    "command line",
    "debugging"
  ],
  "author": {
    "name": "Thomas Lackner",
    "email": "lackner@gmail.com"
  },
  "dependencies": {
    "express": "2.5.8",
    "stylus": ">= 0.0.1",
    "hulk-hogan": ">= 0.0.1",
    "node.extend": ">= 0.0.1"
  },
  "main": "node-web-repl.js",
  "readme": "Node Web REPL\n=============\n\n![Screenshot](http://www.modernmethod.com/send/files/node-web-repl-screenshot.gif)\n\nThis npm is currently a bit rough, but already has aided some of my debugging\nefforts.\n\nThis npm adds a web-based command line to your Node.js apps. Use this to debug\nyour apps, alter behavior on the fly, review in-app data structures, ruin\neverything, etc. You can event connect to your apps after they've been running\nfor months and see how they're doing.\n\nDemo\n----\n\nHow to use:\n\n\tvar webrepl = require('node-web-repl');\n\t// setup your app as normal\n\twebrepl.createServer({\n\t\tusername: 'admin',\n\t\tpassword: 'blob1010',\n\t\tport: 11911,\n\t\thost: '127.0.0.1'\n\t});\n\nYou'll (hopefully) now have a running web-based REPL on port 11911! Connect and\ntype in '1+2' to do some fun math, or 'globals' to browse the global object. \n\nSee tests/ for a full example. (More examples coming soon.)\n\nArchitecture notes\n------------------\n\nRight now Node Web REPL creates its own Express server instance, instead of\nplugging in to your existing routes. Motivation:\n\n* Your existing app (to which you are adding the REPL) may not use Express.\n* Separating the port numbers makes it safer against scanning (possibly).\n* I can't assume that your Express app is using the same view system that\n  mine is.\n* Eventually, we may stop using Express entirely. Our needs are simple.\n\nThe Future\n----------\n\nGenerally, I'd like Node Web REPL to be the first thing you plug in to your app\nto start debugging once it goes live, and then what you use to build your app's\ninternal dashboard (something every app should have).\n\n* Pass in custom UI elements like counters, scrollable messages (signups), etc.\n* Hook console.log so you can view your console output via a web browser\n* Allow you to pass in custom functions and data to be available in the repl\n(right now you can only access stuff descending from the global scope)\n* UI/UX cleanup - make it look slightly less like garbage, scrollbars, etc\n* Visual data browser (scope out 'global' and descend from there)\n* Profile on the fly\n* View Node.js's memory usage\n* Autocomplete\n* MySQL console?\n* Memcache console?\n* Activity log?\n\nIngredients\n-----------\n\nWe use Node.js, Express, HTTP auth via express.basicAuth middleware, and Hogan\nfor templating. [jcubic-jquery.terminal](http://terminal.jcubic.pl/) is used\nfor the type-in terminal code on the client side. Your input is sent via Ajax\nto the /api endpoint, which eval()'s you code and spits back a string.\n\nAuthor\n------\n\nWritten by Thomas Lackner ([@tlack](http://twitter.com/tlack)) and sponsored\nby [.CO](http://go.co)\n\n",
  "_id": "node-web-repl@0.0.5",
  "dist": {
    "shasum": "b1e0cb56783d05253299656bcda771d65c6c0334"
  },
  "_from": "node-web-repl"
}
